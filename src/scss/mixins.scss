// Шрифт по умолчанию
$fontFamily: "";
$fontSize: rem(14); // где 14(px) - размер шрифта по умолчанию из макета

// Основные цвета
$mainColor: #000; // Цвет шрифта по умолчанию


// Минимальная ширина страницы
$minWidth: 320;
// Ширина полотна (макета)
$maxWidth: 1920;
// Ширина ограничивающего контейнера (0 = нет ограничения)
$maxWidthContainer: 1170;
// Общий отступ у контейнера
// (30 = по 15px слева и справа, 0 = нет отступа)
$containerPadding: 30;


// Ширина страбатывания первого брейкпоинта
$containerWidth: $maxWidthContainer + $containerPadding;

// Брейк-поинты
$pc: em($containerWidth); // ПК, ноутбуки, некоторые планшеты в горизонтальном положении
$tablet: em(991.98); // Планшеты, некоторые телефоны в горизонтальном положении
$mobile: em(767.98); // Телефоны L
$mobileSmall: em(479.98); // Телефоны S


// REM
@function rem($px) {
	$result: math.div($px, 16)+rem;
	@return $result;
}

//EM
@function em($px, $current: 16) {
	$result: math.div($px, $current)+em;
	@return $result;
}


// (i) Стили будут применяться ко 
// всем классам содержащим *__container
// Например header__container, main__container и т.д.

[class*="__container"] {
	@if ($maxWidthContainer>0) {
		max-width: rem($maxWidthContainer);
		box-sizing: content-box;
		margin: 0 auto;
	}

	@if ($containerPadding>0) {
		padding: 0 rem(math.div($containerPadding, 2));
	}
}





//Адаптивное свойство
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
	@if ($widthFrom ==$containerWidth and $maxWidthContainer ==0) {
		$widthFrom: $maxWidth;
	}

	// Брейк-поинты в EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Формула плавающего значения

	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;
	$flyValue: #{rem($yIntersection)}" + "#{$slope * 100}vw;

	$propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};

	@if $widthFrom ==$containerWidth or $widthFrom ==$maxWidth or $keepSize ==1 or $keepSize ==2 {
		@media (min-width: $widthFromMedia) {
			#{$property}: rem($startSize);
		}
	}

	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		#{$property}: $propertyValue;
	}

	@if $widthTo ==$minWidth or $keepSize ==1 or $keepSize ==3 {
		@media (max-width: $widthToMedia) {
			#{$property}: rem($minSize);
		}
	}
}